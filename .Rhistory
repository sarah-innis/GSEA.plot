for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_PulmonaryFibroblastsLungTissue.db=create_geneset_db(temp.db)
use_data(Neph2012_PulmonaryFibroblastsLungTissue.db,overwrite=TRUE)
# Number
j=28
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_RenalCorticalEpithelialCells.db=create_geneset_db(temp.db)
use_data(Neph2012_RenalCorticalEpithelialCells.db,overwrite=TRUE)
length(Neph2012[[28]])
length(Neph2012_RenalCorticalEpithelialCells.db)
# Number
j=29
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_SkeletalMuscleMyoblasts.db=create_geneset_db(temp.db)
use_data(Neph2012_SkeletalMuscleMyoblasts.db,overwrite=TRUE)
# Number
j=30
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_Th1Tcells.db=create_geneset_db(temp.db)
use_data(Neph2012_Th1Tcells.db,overwrite=TRUE)
# Number
j=31
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_VillousMesencymalFibroblastCells.db=create_geneset_db(temp.db)
use_data(Neph2012_VillousMesencymalFibroblastCells.db,overwrite=TRUE)
# Number
j=32
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_FetalLungFibroblasts.db=create_geneset_db(temp.db)
use_data(Neph2012_FetalLungFibroblasts.db,overwrite=TRUE)
# Number
j=33
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_Leukemia.db=create_geneset_db(temp.db)
use_data(Neph2012_Leukemia.db,overwrite=TRUE)
# Number
j=34
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_AcutePromyelocyticLeukemia.db=create_geneset_db(temp.db)
use_data(Neph2012_AcutePromyelocyticLeukemia.db,overwrite=TRUE)
# Number
j=35
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_NormalHumanAstrocytes.db=create_geneset_db(temp.db)
use_data(Neph2012_NormalHumanAstrocytes.db,overwrite=TRUE)
# Number
j=36
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_AdultDermalFibroblast.db=create_geneset_db(temp.db)
use_data(Neph2012_AdultDermalFibroblast.db,overwrite=TRUE)
length(Neph2012[[36]])
length(Neph2012_AdultDermalFibroblast.db)
# Number
j=37
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_NeonatalDermalFibroblast.db=create_geneset_db(temp.db)
use_data(Neph2012_NeonatalDermalFibroblast.db,overwrite=TRUE)
# Number
j=38
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_LungFibroblasts.db=create_geneset_db(temp.db)
use_data(Neph2012_LungFibroblasts.db,overwrite=TRUE)
# Number
j=39
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_SmallAirwayEpithelialCells.db=create_geneset_db(temp.db)
use_data(Neph2012_SmallAirwayEpithelialCells.db,overwrite=TRUE)
# Number
j=40
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_SkeletalMuscleMyosatellitecells.db=create_geneset_db(temp.db)
use_data(Neph2012_SkeletalMuscleMyosatellitecells.db,overwrite=TRUE)
# Number
j=41
database=Neph2012[[j]]
names=names(Neph2012[[j]])
null_elements=c()
for (i in 1:length(database)){
if (length(database[[i]])==0){
null_elements=rbind(null_elements,i)
}
}
if (length(null_elements)>0){
database=database[-null_elements]
names=names[-null_elements]
}
temp.db=list()
for (i in 1:length(database)){
s=getSYMBOL(database[[i]],data="org.Hs.eg")
temp.db[[i]]=s
}
names(temp.db)=names
Neph2012_Neuroblastoma.db=create_geneset_db(temp.db)
use_data(Neph2012_Neuroblastoma.db,overwrite=TRUE)
length(NEph2012[[41]])
length(Neph2012[[41]])
length(Neph2012_Neuroblastoma.db)
devtools::install_github("sarah-innis/GSEA.plot")
data(key)
key2=key
key2=sapply(key2,as.character)
key=key2
use_data(key,overwrite=TRUE)
library(devtools)
use_data(key,overwrite=TRUE)
data(key)
typeof(key[,1])
typeof(key[,2])
#devtools::install_github("sarah-innis/GSEA.plot")
library(devtools)
library(GSEA.plot)
data(key)
head(key)
typeof(key[,1])
data(aagmex_expr)
typeof(aagmex_expr[,1])
View(key)
key=sapply(key,as.character)
use_data(key)
use_data(key,overwrite=TRUE)
data(key)
typeof(key)
head(key)
data(key)
head(key)
typeof(key[1,3])
View(key)
GO_mf_filename=database_key("GO molecular function")
library(GSEA.plot)
data(key)
head(key)
typeof(key[1,2])
library(GSEA.plot)
data(aagmex_expr)
expr.input=aagmex_expr
data(aagmex_pheno)
pheno.input=aagmex_pheno
gene.set.input=hall_C1_selected_comb
combination_results= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input, gene.set.input=gene.set.input,
doc.string="Aagmex_combinedset", nperm=1000,nom.p.val.threshold=-1,fdr.q.val.threshold = 0.25,
bar_percent=0.1, gap_percent=0.1, under_percent=0.1,upper_percent=0.1,color_line="black",
color_tick="black",abs.val=F)
gene.set.input=hall_C1_selected_comb
databases=list(hallmark.gs, C1.gs)
hallmark_sets=lapply(sets[1:10],list)
sets=get_genesets(hallmark.gs)
hallmark_sets=lapply(sets[1:10],list)
C1_sets=list("chr8","chr21","chrXq12")
geneset_names=list(hallmark_sets, C1_sets)
hall_C1_selected_comb=combine_databases(databases, geneset_names)
gene.set.input=hall_C1_selected_comb
combination_results= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input, gene.set.input=gene.set.input,
doc.string="Aagmex_combinedset", nperm=1000,nom.p.val.threshold=-1,fdr.q.val.threshold = 0.25,
bar_percent=0.1, gap_percent=0.1, under_percent=0.1,upper_percent=0.1,color_line="black",
color_tick="black",abs.val=F)
input.ds=expr.input
input.cls.name=pheno.input
pheno.input
input.ds.name=expr.input
doc.string="Aagmex_combinedset"
nperm=1000
nom.p.val.threshold=-1
fdr.q.val.threshold = 0.25
wd_new=getwd()
results_new=GSEA(                                                                    # Input/Output Files :-------------------------------------------
input.ds=input.ds.name, # Input gene expression Affy dataset file in RES or GCT format
input.cls=input.cls.name,
#input.ds=paste(wd_new,datasets.folder,input.ds.name, sep="",collapse=NULL), # Input gene expression Affy dataset file in RES or GCT format
#input.cls=paste(wd_new,datasets.folder,input.cls.name,sep="",collapse=NULL),
# gs.db =   paste(genesets.folder,gene.set.input,sep="",collapse=NULL),         # Gene set database in GMT format
gs.db =   gene.set.input,
output.directory      = paste0(wd_new,"/", doc.string,"/"),
output.directory2      =paste0(wd_new,"/"),
# Directory where to store output and results (default: "")
#  Program parameters :-------------------------------------------------------------------------------------------------------------------------
doc.string            = doc.string,   # Documentation string used as a prefix to name result files (default: "GSEA.analysis")
non.interactive.run   = T,               # Run in interactive (i.e. R GUI) or batch (R command line) mode (default: F)
reshuffling.type      = "sample.labels", # Type of permutation reshuffling: "sample.labels" or "gene.labels" (default: "sample.labels"
nperm                 = nperm,            # Number of random permutations (default: 1000)
weighted.score.type   =  1,              # Enrichment correlation-based weighting: 0=no weight (KS), 1= weigthed, 2 = over-weigthed (default: 1)
nom.p.val.threshold   = nom.p.val.threshold,              # Significance threshold for nominal p-vals for gene sets (default: -1, no thres)
fwer.p.val.threshold  = -1,              # Significance threshold for FWER p-vals for gene sets (default: -1, no thres)
fdr.q.val.threshold   = 0.25,            # Significance threshold for FDR q-vals for gene sets (default: 0.25)
topgs                 = 20,              # Besides those passing test, number of top scoring gene sets used for detailed reports (default: 10)
adjust.FDR.q.val      = F,               # Adjust the FDR q-vals (default: F)
gs.size.threshold.min = 15,              # Minimum size (in genes) for database gene sets to be considered (default: 25)
gs.size.threshold.max = 500,             # Maximum size (in genes) for database gene sets to be considered (default: 500)
reverse.sign          = F,               # Reverse direction of gene list (pos. enrichment becomes negative, etc.) (default: F)
preproc.type          = 0,               # Preproc.normalization: 0=none, 1=col(z-score)., 2=col(rank) and row(z-score)., 3=col(rank). (def: 0)
random.seed           = 3338,            # Random number generator seed. (default: 123456)
perm.type             = 0,               # For experts only. Permutation type: 0 = unbalanced, 1 = balanced (default: 0)
fraction              = 1.0,             # For experts only. Subsampling fraction. Set to 1.0 (no resampling) (default: 1.0)
replace               = F,               # For experts only, Resampling mode (replacement or not replacement) (default: F)
save.intermediate.results = F,           # For experts only, save intermediate results (e.g. matrix of random perm. scores) (default: F)
OLD.GSEA              = F,               # Use original (old) version of GSEA (default: F)
use.fast.enrichment.routine = T,          # Use faster routine to compute enrichment for random permutations (default: T)
abs.val=abs.val                               #rank by absolute value of signal to noise ratio
)
abs.val=F
results_new=GSEA(                                                                    # Input/Output Files :-------------------------------------------
input.ds=input.ds.name, # Input gene expression Affy dataset file in RES or GCT format
input.cls=input.cls.name,
#input.ds=paste(wd_new,datasets.folder,input.ds.name, sep="",collapse=NULL), # Input gene expression Affy dataset file in RES or GCT format
#input.cls=paste(wd_new,datasets.folder,input.cls.name,sep="",collapse=NULL),
# gs.db =   paste(genesets.folder,gene.set.input,sep="",collapse=NULL),         # Gene set database in GMT format
gs.db =   gene.set.input,
output.directory      = paste0(wd_new,"/", doc.string,"/"),
output.directory2      =paste0(wd_new,"/"),
# Directory where to store output and results (default: "")
#  Program parameters :-------------------------------------------------------------------------------------------------------------------------
doc.string            = doc.string,   # Documentation string used as a prefix to name result files (default: "GSEA.analysis")
non.interactive.run   = T,               # Run in interactive (i.e. R GUI) or batch (R command line) mode (default: F)
reshuffling.type      = "sample.labels", # Type of permutation reshuffling: "sample.labels" or "gene.labels" (default: "sample.labels"
nperm                 = nperm,            # Number of random permutations (default: 1000)
weighted.score.type   =  1,              # Enrichment correlation-based weighting: 0=no weight (KS), 1= weigthed, 2 = over-weigthed (default: 1)
nom.p.val.threshold   = nom.p.val.threshold,              # Significance threshold for nominal p-vals for gene sets (default: -1, no thres)
fwer.p.val.threshold  = -1,              # Significance threshold for FWER p-vals for gene sets (default: -1, no thres)
fdr.q.val.threshold   = 0.25,            # Significance threshold for FDR q-vals for gene sets (default: 0.25)
topgs                 = 20,              # Besides those passing test, number of top scoring gene sets used for detailed reports (default: 10)
adjust.FDR.q.val      = F,               # Adjust the FDR q-vals (default: F)
gs.size.threshold.min = 15,              # Minimum size (in genes) for database gene sets to be considered (default: 25)
gs.size.threshold.max = 500,             # Maximum size (in genes) for database gene sets to be considered (default: 500)
reverse.sign          = F,               # Reverse direction of gene list (pos. enrichment becomes negative, etc.) (default: F)
preproc.type          = 0,               # Preproc.normalization: 0=none, 1=col(z-score)., 2=col(rank) and row(z-score)., 3=col(rank). (def: 0)
random.seed           = 3338,            # Random number generator seed. (default: 123456)
perm.type             = 0,               # For experts only. Permutation type: 0 = unbalanced, 1 = balanced (default: 0)
fraction              = 1.0,             # For experts only. Subsampling fraction. Set to 1.0 (no resampling) (default: 1.0)
replace               = F,               # For experts only, Resampling mode (replacement or not replacement) (default: F)
save.intermediate.results = F,           # For experts only, save intermediate results (e.g. matrix of random perm. scores) (default: F)
OLD.GSEA              = F,               # Use original (old) version of GSEA (default: F)
use.fast.enrichment.routine = T,          # Use faster routine to compute enrichment for random permutations (default: T)
abs.val=abs.val                               #rank by absolute value of signal to noise ratio
)
ES.tags.files <- results_new$out5[-which(sapply(results_new$out5,is.null))]
ES.data.files <- results_new$out6[-which(sapply(results_new$out6,is.null))]
length(ES.tags.files)
length(ES.data.files)
results_new$out6
which(sapply(results_new$out6,is.null))
which(sapply(results_new$out5,is.null))
ES.tags.files
results_new$out5
ES.tags.files <- results_new$out5[-which(sapply(results_new$out5,is.null))]
View(ES.tags.files)
databases=list(hallmark.gs, C1.gs)
geneset_names=list("all","all")
hall_C1_comb=combine_databases(databases, geneset_names)
View(hall_C1_comb)
gene.set.input=hall_C1_comb
combination_results= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input, gene.set.input=gene.set.input,
doc.string="Aagmex_combinedset", nperm=1000,nom.p.val.threshold=-1,fdr.q.val.threshold = 0.25,
bar_percent=0.1, gap_percent=0.1, under_percent=0.1,upper_percent=0.1,color_line="black",
color_tick="black",abs.val=F)
combination_results$plots[[1]]
combination_results$plots[[11]]
combination_results$plots[[43]]
View(hall_C1_comb)
combination_results$plots[[51]]
combination_results$plots[[53]]
combination_results$plots[[2]]
combination_results$plots[[53]]
data(ENCODE.db)
ENCODE.db[[1]]
ENCODE.db[[2]]
ENCODE.db[[3]]
names=c("TF1","TF2","TF3")
TF1_genes=c("AAMP","ABCA1","CDK9")
TF2_genes=c("DTD1","CBR4")
TF3_genes=c("MIR762","MIR3175")
TF_db=list(TF1_genes,TF2_genes,TF3_genes)
names(TF_db)=names
new_geneset=create_geneset_db(TF_db)
View(new_geneset)
gene.set.input=new_geneset
combination_results= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input, gene.set.input=gene.set.input,
doc.string="Aagmex_combinedset", nperm=1000,nom.p.val.threshold=-1,fdr.q.val.threshold = 0.25,
bar_percent=0.1, gap_percent=0.1, under_percent=0.1,upper_percent=0.1,color_line="black",
color_tick="black",abs.val=F)
library(GSEA.plot)
help(GSEA.plot)
?newfunction
install.packages("ggplot2")
install.packages("Rcpp")
