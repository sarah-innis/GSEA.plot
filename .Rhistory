lty.vec <- c(1, 1)
lwd.vec <- c(2, 2)
legend(x=-0.2, y=y.plot.range[2], bty="n", bg = "white", legend=leg.txt, lty = lty.vec, lwd = lwd.vec, col = c.vec, cex = 1.0)
leg.txt <- paste("Neg. ES \"", phen2, "\" ", sep="", collapse="")
text(x=x.plot.range[1], y=-0.1*max(temp$y), adj = c(0, 0), labels=leg.txt, cex = 1.0)
leg.txt <- paste(" Pos. ES: \"", phen1, "\" ", sep="", collapse="")
text(x=x.plot.range[2], y=-0.1*max(temp$y), adj = c(1, 0), labels=leg.txt, cex = 1.0)
# create pinkogram for each gene set
kk <- 1
pinko <- matrix(0, nrow = size.G[i], ncol = cols)
pinko.gene.names <- vector(length = size.G[i], mode = "character")
for (k in 1:rows) {
if (Obs.indicator[i, k] == 1) {
pinko[kk,] <- A[obs.index[k],]
pinko.gene.names[kk] <- obs.gene.symbols[k]
kk <- kk + 1
}
}
GSEA.HeatMapPlot(V = pinko, row.names = pinko.gene.names, col.labels = class.labels, col.classes = class.phen, col.names = sample.names, main =" Heat Map for Genes in Gene Set", xlab=" ", ylab=" ")
if (non.interactive.run == F) {
if (.Platform$OS.type == "windows") {
savePlot(filename = gs.filename, type ="jpeg", device = dev.cur())
} else if (.Platform$OS.type == "unix") {
dev.off()
}
} else {
dev.off()
}
} # if p.vals thres
} # loop over gene sets
gene.enriched.names
View(gene.enriched.names)
View(gene.enriched.names)
#out1 ESdata
#out1 = as.data.frame( cbind(ind, Obs.RES[i,]) )
sei <- gene.enriched.names[-which(sapply(gene.enriched.names,is.null))]
View(sei)
for (i in 1:Ng) {
# if the gene set nom p-val, fwer p-val, or FDR passes the threshold then you can create a plot
#else does nothing
if ((p.vals[i, 1] <= nom.p.val.threshold) ||
(p.vals[i, 2] <= fwer.p.val.threshold) ||
(FDR.mean.sorted[i] <= fdr.q.val.threshold) ||
(is.element(i, c(Obs.ES.index[1:topgs], Obs.ES.index[(Ng - topgs + 1): Ng])))) {
#  produce report per gene set
kk <- 1
gene.number <- vector(length = size.G[i], mode = "character")
gene.names <- vector(length = size.G[i], mode = "character")
gene.symbols <- vector(length = size.G[i], mode = "character")
gene.descs <- vector(length = size.G[i], mode = "character")
gene.list.loc <- vector(length = size.G[i], mode = "numeric")
core.enrichment <- vector(length = size.G[i], mode = "character")
gene.s2n <- vector(length = size.G[i], mode = "numeric")
gene.RES <- vector(length = size.G[i], mode = "numeric")
rank.list <- seq(1, N)
if (Obs.ES[i] >= 0) {
set.k <- seq(1, N, 1)
phen.tag <- phen1
loc <- match(i, Obs.ES.index)
} else {
set.k <- seq(N, 1, -1)
phen.tag <- phen2
loc <- Ng - match(i, Obs.ES.index) + 1
}
for (k in set.k) {
if (Obs.indicator[i, k] == 1) {
gene.number[kk] <- kk
#gets the names of the gene labels that have tick marks
gene.names[kk] <- obs.gene.labels[k]
gene.symbols[kk] <- substr(obs.gene.symbols[k], 1, 15)
gene.descs[kk] <- substr(obs.gene.descs[k], 1, 40)
gene.list.loc[kk] <- k
#this is where signal to noise comes from-- obs.s2n comes from that function
gene.s2n[kk] <- signif(obs.s2n[k], digits=3)
gene.RES[kk] <- signif(Obs.RES[i, k], digits = 3)
if (Obs.ES[i] >= 0) {
core.enrichment[kk] <- ifelse(gene.list.loc[kk] <= Obs.arg.ES[i], "YES", "NO")
} else {
core.enrichment[kk] <- ifelse(gene.list.loc[kk] > Obs.arg.ES[i], "YES", "NO")
}
kk <- kk + 1
}
}
#out7 report for each gene set-- gives you gene set for the tick mark
gene.report <- data.frame(cbind(gene.number, gene.names, gene.symbols, gene.descs, gene.list.loc, gene.s2n, gene.RES, core.enrichment))
names(gene.report) <- c("#", "GENE", "SYMBOL", "DESC", "LIST LOC", "S2N", "RES", "CORE_ENRICHMENT")
#get report file names
out7[[i]] <- paste(gs.names[i],".report.",phen.tag,".",loc,".txt",sep="",collapse="")
gene.enriched.names[[i]] <- gene.names
#       print(gene.report)
if (output.directory != "")  {
filename <- paste(output.directory, doc.string, ".", gs.names[i], ".report.", phen.tag, ".", loc, ".txt", sep="", collapse="")
write.table(gene.report, file = filename, quote=F, row.names=F, sep = "\t")
if (non.interactive.run == F) {
if (.Platform$OS.type == "windows") {
gs.filename <- paste(output.directory, doc.string, ".", gs.names[i], ".plot.", phen.tag, ".", loc, sep="", collapse="")
windows(width = 14, height = 6)
} else if (.Platform$OS.type == "unix") {
gs.filename <- paste(output.directory, doc.string, ".", gs.names[i], ".plot.", phen.tag, ".", loc, ".pdf", sep="", collapse="")
pdf(file=gs.filename, height = 6, width = 14)
}
} else {
if (.Platform$OS.type == "unix") {
gs.filename <- paste(output.directory, doc.string, ".", gs.names[i], ".plot.", phen.tag, ".", loc, ".pdf", sep="", collapse="")
pdf(file=gs.filename, height = 6, width = 14)
} else if (.Platform$OS.type == "windows") {
gs.filename <- paste(output.directory, doc.string, ".", gs.names[i], ".plot.", phen.tag, ".", loc, ".pdf", sep="", collapse="")
pdf(file=gs.filename, height = 6, width = 14)
}
}
}
nf <- layout(matrix(c(1,2,3), 1, 3, byrow=T), 1, c(1, 1, 1), TRUE)
ind <- 1:N
min.RES <- min(Obs.RES[i,])
max.RES <- max(Obs.RES[i,])
if (max.RES < 0.3) max.RES <- 0.3
if (min.RES > -0.3) min.RES <- -0.3
delta <- (max.RES - min.RES)*0.50
min.plot <- min.RES - 2*delta
max.plot <- max.RES
max.corr <- max(obs.s2n)
min.corr <- min(obs.s2n)
Obs.correl.vector.norm <- (obs.s2n - min.corr)/(max.corr - min.corr)*1.25*delta + min.plot
zero.corr.line <- (- min.corr/(max.corr - min.corr))*1.25*delta + min.plot
col <- ifelse(Obs.ES[i] > 0, 2, 4)
#out1 ESdata
#out1 = as.data.frame( cbind(ind, Obs.RES[i,]) )
gene.enriched.names <- gene.enriched.names[-which(sapply(gene.enriched.names,is.null))]
out1 = as.data.frame( cbind(ind, gene.enriched.names[[i]], Obs.RES[i,]) )
names(out1) = c("index","gene symbol","RES")
file1 <- paste(output.directory, doc.string, ".", gs.names[i], ".ESdata.", phen.tag, ".", loc, ".txt", sep="", collapse="")
write.table(out1, file = file1, quote=F, row.names=F, sep = "\t")
out2 = as.data.frame( Obs.indicator[i,] )
names(out2) = c("EStag")
file2 <- paste(output.directory, doc.string, ".", gs.names[i], ".EStags.", phen.tag, ".", loc, ".txt", sep="", collapse="")
write.table(out2, file = file2, quote=F, row.names=F, sep = "\t")
sub.string <- paste("Number of genes: ", N, " (in list), ", size.G[i], " (in gene set)", sep = "", collapse="")
main.string <- paste("Gene Set ", i, ":", gs.names[i])
plot(ind, Obs.RES[i,], main = main.string, sub = sub.string, xlab = "Gene List Index", ylab = "Running Enrichment Score (RES)", xlim=c(1, N), ylim=c(min.plot, max.plot), type = "l", lwd = 2, cex = 1, col = col)
###Sarah
#out4[[i]] <- paste("Gene Set",i,":",gs.names[i]) getting rid of this to simplify plot names
out4[[i]] <- paste(gs.names[i])
out5[[i]] <- paste(gs.names[i], ".EStags.", phen.tag, ".", loc, ".txt", sep="", collapse="")
out6[[i]] <- paste(gs.names[i],".ESdata.",phen.tag,".",loc,".txt",sep="",collapse="")
for (j in seq(1, N, 20)) {
lines(c(j, j), c(zero.corr.line, Obs.correl.vector.norm[j]), lwd = 1, cex = 1, col = colors()[12]) # shading of correlation plot
}
lines(c(1, N), c(0, 0), lwd = 1, lty = 2, cex = 1, col = 1) # zero RES line
lines(c(Obs.arg.ES[i], Obs.arg.ES[i]), c(min.plot, max.plot), lwd = 1, lty = 3, cex = 1, col = col) # max enrichment vertical line
for (j in 1:N) {
if (Obs.indicator[i, j] == 1) {
lines(c(j, j), c(min.plot + 1.25*delta, min.plot + 1.75*delta), lwd = 1, lty = 1, cex = 1, col = 1)  # enrichment tags
}
}
lines(ind, Obs.correl.vector.norm, type = "l", lwd = 1, cex = 1, col = 1)
lines(c(1, N), c(zero.corr.line, zero.corr.line), lwd = 1, lty = 1, cex = 1, col = 1) # zero correlation horizontal line
temp <- order(abs(obs.s2n), decreasing=T)
arg.correl <- temp[N]
lines(c(arg.correl, arg.correl), c(min.plot, max.plot), lwd = 1, lty = 3, cex = 1, col = 3) # zero crossing correlation vertical line
leg.txt <- paste("\"", phen1, "\" ", sep="", collapse="")
text(x=1, y=min.plot, adj = c(0, 0), labels=leg.txt, cex = 1.0)
leg.txt <- paste("\"", phen2, "\" ", sep="", collapse="")
text(x=N, y=min.plot, adj = c(1, 0), labels=leg.txt, cex = 1.0)
adjx <- ifelse(Obs.ES[i] > 0, 0, 1)
leg.txt <- paste("Peak at ", Obs.arg.ES[i], sep="", collapse="")
text(x=Obs.arg.ES[i], y=min.plot + 1.8*delta, adj = c(adjx, 0), labels=leg.txt, cex = 1.0)
leg.txt <- paste("Zero crossing at ", arg.correl, sep="", collapse="")
text(x=arg.correl, y=min.plot + 1.95*delta, adj = c(adjx, 0), labels=leg.txt, cex = 1.0)
# nominal p-val histogram
sub.string <- paste("ES =", signif(Obs.ES[i], digits = 3), " NES =", signif(Obs.ES.norm[i], digits=3), "Nom. p-val=", signif(p.vals[i, 1], digits = 3),"FWER=", signif(p.vals[i, 2], digits = 3), "FDR=", signif(FDR.mean.sorted[i], digits = 3))
temp <- density(phi[i,], adjust=adjust.param)
x.plot.range <- range(temp$x)
y.plot.range <- c(-0.125*max(temp$y), 1.5*max(temp$y))
plot(temp$x, temp$y, type = "l", sub = sub.string, xlim = x.plot.range, ylim = y.plot.range, lwd = 2, col = 2, main = "Gene Set Null Distribution", xlab = "ES", ylab="P(ES)")
x.loc <- which.min(abs(temp$x - Obs.ES[i]))
lines(c(Obs.ES[i], Obs.ES[i]), c(0, temp$y[x.loc]), lwd = 2, lty = 1, cex = 1, col = 1)
lines(x.plot.range, c(0, 0), lwd = 1, lty = 1, cex = 1, col = 1)
leg.txt <- c("Gene Set Null Density", "Observed Gene Set ES value")
c.vec <- c(2, 1)
lty.vec <- c(1, 1)
lwd.vec <- c(2, 2)
legend(x=-0.2, y=y.plot.range[2], bty="n", bg = "white", legend=leg.txt, lty = lty.vec, lwd = lwd.vec, col = c.vec, cex = 1.0)
leg.txt <- paste("Neg. ES \"", phen2, "\" ", sep="", collapse="")
text(x=x.plot.range[1], y=-0.1*max(temp$y), adj = c(0, 0), labels=leg.txt, cex = 1.0)
leg.txt <- paste(" Pos. ES: \"", phen1, "\" ", sep="", collapse="")
text(x=x.plot.range[2], y=-0.1*max(temp$y), adj = c(1, 0), labels=leg.txt, cex = 1.0)
# create pinkogram for each gene set
kk <- 1
pinko <- matrix(0, nrow = size.G[i], ncol = cols)
pinko.gene.names <- vector(length = size.G[i], mode = "character")
for (k in 1:rows) {
if (Obs.indicator[i, k] == 1) {
pinko[kk,] <- A[obs.index[k],]
pinko.gene.names[kk] <- obs.gene.symbols[k]
kk <- kk + 1
}
}
GSEA.HeatMapPlot(V = pinko, row.names = pinko.gene.names, col.labels = class.labels, col.classes = class.phen, col.names = sample.names, main =" Heat Map for Genes in Gene Set", xlab=" ", ylab=" ")
if (non.interactive.run == F) {
if (.Platform$OS.type == "windows") {
savePlot(filename = gs.filename, type ="jpeg", device = dev.cur())
} else if (.Platform$OS.type == "unix") {
dev.off()
}
} else {
dev.off()
}
} # if p.vals thres
} # loop over gene sets
obs.gene.labels
View(obs.gene.labels)
Nmax
N
results_new=GSEA(                                                                    # Input/Output Files :-------------------------------------------
input.ds=input.ds.name, # Input gene expression Affy dataset file in RES or GCT format
input.cls=input.cls.name,
#input.ds=paste(wd_new,datasets.folder,input.ds.name, sep="",collapse=NULL), # Input gene expression Affy dataset file in RES or GCT format
#input.cls=paste(wd_new,datasets.folder,input.cls.name,sep="",collapse=NULL),
# gs.db =   paste(genesets.folder,gene.set.input,sep="",collapse=NULL),         # Gene set database in GMT format
gs.db =   gene.set.input,
output.directory      = paste0(wd_new,"/", doc.string,"/"),
output.directory2      =paste0(wd_new,"/"),
# Directory where to store output and results (default: "")
#  Program parameters :-------------------------------------------------------------------------------------------------------------------------
doc.string            = doc.string,   # Documentation string used as a prefix to name result files (default: "GSEA.analysis")
non.interactive.run   = T,               # Run in interactive (i.e. R GUI) or batch (R command line) mode (default: F)
reshuffling.type      = "sample.labels", # Type of permutation reshuffling: "sample.labels" or "gene.labels" (default: "sample.labels"
nperm                 = nperm,            # Number of random permutations (default: 1000)
weighted.score.type   =  1,              # Enrichment correlation-based weighting: 0=no weight (KS), 1= weigthed, 2 = over-weigthed (default: 1)
nom.p.val.threshold   = -1,              # Significance threshold for nominal p-vals for gene sets (default: -1, no thres)
fwer.p.val.threshold  = -1,              # Significance threshold for FWER p-vals for gene sets (default: -1, no thres)
fdr.q.val.threshold   = 0.25,            # Significance threshold for FDR q-vals for gene sets (default: 0.25)
topgs                 = 20,              # Besides those passing test, number of top scoring gene sets used for detailed reports (default: 10)
adjust.FDR.q.val      = F,               # Adjust the FDR q-vals (default: F)
gs.size.threshold.min = 15,              # Minimum size (in genes) for database gene sets to be considered (default: 25)
gs.size.threshold.max = gs.size.threshold.max,             # Maximum size (in genes) for database gene sets to be considered (default: 500)
reverse.sign          = F,               # Reverse direction of gene list (pos. enrichment becomes negative, etc.) (default: F)
preproc.type          = 0,               # Preproc.normalization: 0=none, 1=col(z-score)., 2=col(rank) and row(z-score)., 3=col(rank). (def: 0)
random.seed           = 3338,            # Random number generator seed. (default: 123456)
perm.type             = 0,               # For experts only. Permutation type: 0 = unbalanced, 1 = balanced (default: 0)
fraction              = 1.0,             # For experts only. Subsampling fraction. Set to 1.0 (no resampling) (default: 1.0)
replace               = F,               # For experts only, Resampling mode (replacement or not replacement) (default: F)
save.intermediate.results = F,           # For experts only, save intermediate results (e.g. matrix of random perm. scores) (default: F)
OLD.GSEA              = F,               # Use original (old) version of GSEA (default: F)
use.fast.enrichment.routine = T,          # Use faster routine to compute enrichment for random permutations (default: T)
abs.val=abs.val                               #rank by absolute value of signal to noise ratio
)
results_new=GSEA(                                                                    # Input/Output Files :-------------------------------------------
input.ds=input.ds.name, # Input gene expression Affy dataset file in RES or GCT format
input.cls=input.cls.name,
#input.ds=paste(wd_new,datasets.folder,input.ds.name, sep="",collapse=NULL), # Input gene expression Affy dataset file in RES or GCT format
#input.cls=paste(wd_new,datasets.folder,input.cls.name,sep="",collapse=NULL),
# gs.db =   paste(genesets.folder,gene.set.input,sep="",collapse=NULL),         # Gene set database in GMT format
gs.db =   gene.set.input,
output.directory      = paste0(wd_new,"/", doc.string,"/"),
output.directory2      =paste0(wd_new,"/"),
# Directory where to store output and results (default: "")
#  Program parameters :-------------------------------------------------------------------------------------------------------------------------
doc.string            = doc.string,   # Documentation string used as a prefix to name result files (default: "GSEA.analysis")
non.interactive.run   = T,               # Run in interactive (i.e. R GUI) or batch (R command line) mode (default: F)
reshuffling.type      = "sample.labels", # Type of permutation reshuffling: "sample.labels" or "gene.labels" (default: "sample.labels"
nperm                 = nperm,            # Number of random permutations (default: 1000)
weighted.score.type   =  1,              # Enrichment correlation-based weighting: 0=no weight (KS), 1= weigthed, 2 = over-weigthed (default: 1)
nom.p.val.threshold   = -1,              # Significance threshold for nominal p-vals for gene sets (default: -1, no thres)
fwer.p.val.threshold  = -1,              # Significance threshold for FWER p-vals for gene sets (default: -1, no thres)
fdr.q.val.threshold   = 0.25,            # Significance threshold for FDR q-vals for gene sets (default: 0.25)
topgs                 = 20,              # Besides those passing test, number of top scoring gene sets used for detailed reports (default: 10)
adjust.FDR.q.val      = F,               # Adjust the FDR q-vals (default: F)
gs.size.threshold.min = 15,              # Minimum size (in genes) for database gene sets to be considered (default: 25)
gs.size.threshold.max = gs.size.threshold.max,             # Maximum size (in genes) for database gene sets to be considered (default: 500)
reverse.sign          = F,               # Reverse direction of gene list (pos. enrichment becomes negative, etc.) (default: F)
preproc.type          = 0,               # Preproc.normalization: 0=none, 1=col(z-score)., 2=col(rank) and row(z-score)., 3=col(rank). (def: 0)
random.seed           = 3338,            # Random number generator seed. (default: 123456)
perm.type             = 0,               # For experts only. Permutation type: 0 = unbalanced, 1 = balanced (default: 0)
fraction              = 1.0,             # For experts only. Subsampling fraction. Set to 1.0 (no resampling) (default: 1.0)
replace               = F,               # For experts only, Resampling mode (replacement or not replacement) (default: F)
save.intermediate.results = F,           # For experts only, save intermediate results (e.g. matrix of random perm. scores) (default: F)
OLD.GSEA              = F,               # Use original (old) version of GSEA (default: F)
use.fast.enrichment.routine = T,          # Use faster routine to compute enrichment for random permutations (default: T)
abs.val=abs.val                               #rank by absolute value of signal to noise ratio
)
results_new=GSEA(                                                                    # Input/Output Files :-------------------------------------------
input.ds=input.ds.name, # Input gene expression Affy dataset file in RES or GCT format
input.cls=input.cls.name,
#input.ds=paste(wd_new,datasets.folder,input.ds.name, sep="",collapse=NULL), # Input gene expression Affy dataset file in RES or GCT format
#input.cls=paste(wd_new,datasets.folder,input.cls.name,sep="",collapse=NULL),
# gs.db =   paste(genesets.folder,gene.set.input,sep="",collapse=NULL),         # Gene set database in GMT format
gs.db =   gene.set.input,
output.directory      = paste0(wd_new,"/", doc.string,"/"),
output.directory2      =paste0(wd_new,"/"),
# Directory where to store output and results (default: "")
#  Program parameters :-------------------------------------------------------------------------------------------------------------------------
doc.string            = doc.string,   # Documentation string used as a prefix to name result files (default: "GSEA.analysis")
non.interactive.run   = T,               # Run in interactive (i.e. R GUI) or batch (R command line) mode (default: F)
reshuffling.type      = "sample.labels", # Type of permutation reshuffling: "sample.labels" or "gene.labels" (default: "sample.labels"
nperm                 = nperm,            # Number of random permutations (default: 1000)
weighted.score.type   =  1,              # Enrichment correlation-based weighting: 0=no weight (KS), 1= weigthed, 2 = over-weigthed (default: 1)
nom.p.val.threshold   = -1,              # Significance threshold for nominal p-vals for gene sets (default: -1, no thres)
fwer.p.val.threshold  = -1,              # Significance threshold for FWER p-vals for gene sets (default: -1, no thres)
fdr.q.val.threshold   = 0.25,            # Significance threshold for FDR q-vals for gene sets (default: 0.25)
topgs                 = 20,              # Besides those passing test, number of top scoring gene sets used for detailed reports (default: 10)
adjust.FDR.q.val      = F,               # Adjust the FDR q-vals (default: F)
gs.size.threshold.min = 15,              # Minimum size (in genes) for database gene sets to be considered (default: 25)
gs.size.threshold.max = gs.size.threshold.max,             # Maximum size (in genes) for database gene sets to be considered (default: 500)
reverse.sign          = F,               # Reverse direction of gene list (pos. enrichment becomes negative, etc.) (default: F)
preproc.type          = 0,               # Preproc.normalization: 0=none, 1=col(z-score)., 2=col(rank) and row(z-score)., 3=col(rank). (def: 0)
random.seed           = 3338,            # Random number generator seed. (default: 123456)
perm.type             = 0,               # For experts only. Permutation type: 0 = unbalanced, 1 = balanced (default: 0)
fraction              = 1.0,             # For experts only. Subsampling fraction. Set to 1.0 (no resampling) (default: 1.0)
replace               = F,               # For experts only, Resampling mode (replacement or not replacement) (default: F)
save.intermediate.results = F,           # For experts only, save intermediate results (e.g. matrix of random perm. scores) (default: F)
OLD.GSEA              = F,               # Use original (old) version of GSEA (default: F)
use.fast.enrichment.routine = T,          # Use faster routine to compute enrichment for random permutations (default: T)
abs.val=abs.val                               #rank by absolute value of signal to noise ratio
)
results_new=GSEA(                                                                    # Input/Output Files :-------------------------------------------
input.ds=input.ds.name, # Input gene expression Affy dataset file in RES or GCT format
input.cls=input.cls.name,
#input.ds=paste(wd_new,datasets.folder,input.ds.name, sep="",collapse=NULL), # Input gene expression Affy dataset file in RES or GCT format
#input.cls=paste(wd_new,datasets.folder,input.cls.name,sep="",collapse=NULL),
# gs.db =   paste(genesets.folder,gene.set.input,sep="",collapse=NULL),         # Gene set database in GMT format
gs.db =   gene.set.input,
output.directory      = paste0(wd_new,"/", doc.string,"/"),
output.directory2      =paste0(wd_new,"/"),
# Directory where to store output and results (default: "")
#  Program parameters :-------------------------------------------------------------------------------------------------------------------------
doc.string            = doc.string,   # Documentation string used as a prefix to name result files (default: "GSEA.analysis")
non.interactive.run   = T,               # Run in interactive (i.e. R GUI) or batch (R command line) mode (default: F)
reshuffling.type      = "sample.labels", # Type of permutation reshuffling: "sample.labels" or "gene.labels" (default: "sample.labels"
nperm                 = nperm,            # Number of random permutations (default: 1000)
weighted.score.type   =  1,              # Enrichment correlation-based weighting: 0=no weight (KS), 1= weigthed, 2 = over-weigthed (default: 1)
nom.p.val.threshold   = -1,              # Significance threshold for nominal p-vals for gene sets (default: -1, no thres)
fwer.p.val.threshold  = -1,              # Significance threshold for FWER p-vals for gene sets (default: -1, no thres)
fdr.q.val.threshold   = 0.25,            # Significance threshold for FDR q-vals for gene sets (default: 0.25)
topgs                 = 20,              # Besides those passing test, number of top scoring gene sets used for detailed reports (default: 10)
adjust.FDR.q.val      = F,               # Adjust the FDR q-vals (default: F)
gs.size.threshold.min = 15,              # Minimum size (in genes) for database gene sets to be considered (default: 25)
gs.size.threshold.max = gs.size.threshold.max,             # Maximum size (in genes) for database gene sets to be considered (default: 500)
reverse.sign          = F,               # Reverse direction of gene list (pos. enrichment becomes negative, etc.) (default: F)
preproc.type          = 0,               # Preproc.normalization: 0=none, 1=col(z-score)., 2=col(rank) and row(z-score)., 3=col(rank). (def: 0)
random.seed           = 3338,            # Random number generator seed. (default: 123456)
perm.type             = 0,               # For experts only. Permutation type: 0 = unbalanced, 1 = balanced (default: 0)
fraction              = 1.0,             # For experts only. Subsampling fraction. Set to 1.0 (no resampling) (default: 1.0)
replace               = F,               # For experts only, Resampling mode (replacement or not replacement) (default: F)
save.intermediate.results = F,           # For experts only, save intermediate results (e.g. matrix of random perm. scores) (default: F)
OLD.GSEA              = F,               # Use original (old) version of GSEA (default: F)
use.fast.enrichment.routine = T,          # Use faster routine to compute enrichment for random permutations (default: T)
abs.val=abs.val                               #rank by absolute value of signal to noise ratio
)
wd_new=getwd()
if (file.exists(paste0(wd_new,"/", doc.string))==FALSE){
dir.create(doc.string)
}
if (length(which(sapply(results_new$out5,is.null))) == 0){
ES.tags.files <- results_new$out5
ES.data.files <- results_new$out6
ES.report.files <- results_new$out7
gene.set.numbers <- results_new$out4
}
else{
#this step removes the gene sets which did not generate ES.tags, ES.data, or ES.report files
ES.tags.files <- results_new$out5[-which(sapply(results_new$out5,is.null))]
ES.data.files <- results_new$out6[-which(sapply(results_new$out6,is.null))]
ES.report.files <- results_new$out7[-which(sapply(results_new$out7,is.null))]
gene.set.numbers <- results_new$out4[-which(sapply(results_new$out5,is.null))]
}
else{
#this step removes the gene sets which did not generate ES.tags, ES.data, or ES.report files
ES.tags.files <- results_new$out5[-which(sapply(results_new$out5,is.null))]
ES.data.files <- results_new$out6[-which(sapply(results_new$out6,is.null))]
ES.report.files <- results_new$out7[-which(sapply(results_new$out7,is.null))]
gene.set.numbers <- results_new$out4[-which(sapply(results_new$out5,is.null))]
}
if (length(which(sapply(results_new$out5,is.null))) == 0){
ES.tags.files <- results_new$out5
ES.data.files <- results_new$out6
ES.report.files <- results_new$out7
gene.set.numbers <- results_new$out4
}
else{
#this step removes the gene sets which did not generate ES.tags, ES.data, or ES.report files
ES.tags.files <- results_new$out5[-which(sapply(results_new$out5,is.null))]
ES.data.files <- results_new$out6[-which(sapply(results_new$out6,is.null))]
ES.report.files <- results_new$out7[-which(sapply(results_new$out7,is.null))]
gene.set.numbers <- results_new$out4[-which(sapply(results_new$out5,is.null))]
}
if (length(which(sapply(results_new$out5,is.null))) == 0){
ES.tags.files <- results_new$out5
ES.data.files <- results_new$out6
ES.report.files <- results_new$out7
gene.set.numbers <- results_new$out4
} else{
#this step removes the gene sets which did not generate ES.tags, ES.data, or ES.report files
ES.tags.files <- results_new$out5[-which(sapply(results_new$out5,is.null))]
ES.data.files <- results_new$out6[-which(sapply(results_new$out6,is.null))]
ES.report.files <- results_new$out7[-which(sapply(results_new$out7,is.null))]
gene.set.numbers <- results_new$out4[-which(sapply(results_new$out5,is.null))]
}
gene.set.reference.matrix <- results_new$gene.set.reference.matrix
gene.set.leading <- rep(list("null"),length(gene.set.numbers))
ES <- rep(list("null"),length(gene.set.numbers))
enrichind <- rep(list("null"),length(gene.set.numbers))
report1 <- results_new$report1
report2 <- results_new$report2
if (regexpr(pattern="HALLMARK_", gene.set.numbers[1]) == -1) {
#nothing
} else {
for (i in 1: length(gene.set.numbers)){
g <- strsplit(gene.set.numbers[[i]],split="HALLMARK_")
h <- g[[1]][2]
gene.set.numbers[[i]] <- h
}
}
#plotting and finding leading edge set
plots <- vector(mode="list",length=length(ES.data.files))
i=1
dat1_name=paste(wd_new,"/",doc.string,"/",doc.string,".",ES.data.files[[i]],sep="",collapse=NULL)
dat2_name=paste(wd_new,"/",doc.string,"/",doc.string,".",ES.tags.files[[i]],sep="",collapse=NULL)
report_name=paste(wd_new,"/",doc.string,"/",doc.string,".",ES.report.files[[i]],sep="",collapse=NULL)
dat1 = read.table(dat1_name,header=T,sep="\t")
dat2 = read.table(dat2_name,header=T,sep="\t")
report=read.table(report_name,sep="\t")
datcomb <- cbind(dat1,dat2)
View(datcomb)
ES[[i]]=datcomb[-5]
ES[[1]]
pp= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input, gene.set.input=gene.set.input,
doc.string="Aagmex_hall", nperm=1000,
fdr.q.val.threshold = 0.25,abs.val=F,gs.size.threshold.max=1000, bar_percent=0.1, gap_percent=0.1,
under_percent=0.1,upper_percent=0.1,color_line="black",
color_tick="black")
pp$plots[[1]]
View(pp)
pp$plots[[1]]
rlang:: last_error()
View(datcomb)
datcomb2 <- datcomb[, !duplicated(datcomb)]
View(datcomb2)
?duplicate
datcomb2 <- merge(dat1,dat2)
View(datcomb2)
View(datcomb2)
pp= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input, gene.set.input=gene.set.input,
doc.string="Aagmex_hall", nperm=1000,
fdr.q.val.threshold = 0.25,abs.val=F,gs.size.threshold.max=1000, bar_percent=0.1, gap_percent=0.1,
under_percent=0.1,upper_percent=0.1,color_line="black",
color_tick="black")
pp$plots[[1]]
pp$plots[[1]]
plot.ES(list.of.plots=pp$plots,plotname="GSEA_plots")
names(pp$gene.set.reference.matrix)[[1]]
head(pp$gene.set.reference.matrix[[1]])
names(pp$gene.set.reference.matrix)[[1]]
head(pp$gene.set.leading[[1]])
pp$report1[1,-3]
data1=pp$ES[[2]]
head(data1)
library(GSEA.plot)
pp= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input, gene.set.input=gene.set.input,
doc.string="Aagmex_hall", nperm=1000,
fdr.q.val.threshold = 0.25,abs.val=F,gs.size.threshold.max=1000, bar_percent=0.1, gap_percent=0.1,
under_percent=0.1,upper_percent=0.1,color_line="black",
color_tick="black")
data(aagmex_expr)
expr.input=aagmex_expr
data(aagmex_pheno)
pheno.input=aagmex_pheno
data(hallmark.gs)
gene.set.input=hallmark.gs
pp= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input, gene.set.input=gene.set.input,
doc.string="Aagmex_hall", nperm=1000,
fdr.q.val.threshold = 0.25,abs.val=F,gs.size.threshold.max=1000, bar_percent=0.1, gap_percent=0.1,
under_percent=0.1,upper_percent=0.1,color_line="black",
color_tick="black")
pp$plots[[1]]
plot.ES(list.of.plots=pp$plots,plotname="GSEA_plots")
names(pp$gene.set.reference.matrix)[[1]]
head(pp$gene.set.reference.matrix[[1]])
names(pp$gene.set.reference.matrix)[[1]]
head(pp$gene.set.leading[[1]])
pp$report1[1,-3]
data1=pp$ES[[2]]
head(data1)
View(pp$ES)
View(pp$ES$CHOLESTEROL_HOMEOSTASIS)
which.max(abs(pp$ES$CHOLESTEROL_HOMEOSTASIS$RES))
pp$report2
pp$gene.set.leading[[1]]
View(pp$ES$CHOLESTEROL_HOMEOSTASIS)
data(key)
View(key)
pp$report1[1,-3]
head(data1)
data(transf)
data(transm)
tx = t(c("HALLMARK_KLF14","http://www.broadinstitute.org/gsea/msigdb/cards/HALLMARK_KLF14",transf[,1], transm[,1]))
View(head(tx))
addition=tx
database=hallmark.gs
original_length=length(database)
nrow(addition)
for (ii in 1: nrow(addition)){
temp=paste(addition[ii,], collapse="\t")
database[[original_length+ii]]=temp
}
temp
library(GSEA.plot)
library(GSEA.plot)
