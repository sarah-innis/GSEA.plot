expr = read.table(fname,header=T,stringsAsFactors=F)
# format expr
expr2 = expr[!(duplicated(expr[,1])==T),]
expr.input = expr2[,3:ncol(expr2)]
rownames(expr.input) = expr2[,1]
gtex_expr=expr.input
use_Data(gtex_expr)
use_data(gtex_expr)
data(gtex_ann)
library(GSEA.plot)
data(gtex_ann)
gtex_ann
pheno.input=create_phenoinput(gtex_ann)
View(pheno.input)
data(gtex_expr)
expr.input=gtex_expr
gene.set.input=hallmark.gs
pp= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input, gene.set.input=gene.set.input,
doc.string="Gtex_hall", nperm=1000,nom.p.val.threshold=-1,
fdr.q.val.threshold = 0.25,abs.val=F,bar_percent=0.1, gap_percent=0.1,
under_percent=0.1,upper_percent=0.1,color_line="black",
color_tick="black")
library(GSEA.plot)
library(GSEA.plot)
setwd("C:/Users/Student/Documents/CivelekLab/August_Edits/")
fname = "f_KLF14trans.txt"
transf = read.table(fname,header=F,stringsAsFactors=F)
fname = "m_KLF14trans.txt"
transm = read.table(fname,header=F,stringsAsFactors=F)
tx = c("HALLMARK_KLF14","http://www.broadinstitute.org/gsea/msigdb/cards/HALLMARK_KLF14",transf[,1], transm[,1])
add_to_database=function(database="",addition=""){
original_length=length(database)
#format the added stuff first
for (i in 1:length(addition)) {
addition[[i]]=paste(addition[[i]],collapse="\t")
database[[original_length+i]]=addition[[i]]
}
return(new_db)
}
data(hallmark.gs)
add_to_database(database=hallmark.gs,addition=tx)
add_to_database=function(database="",addition=""){
original_length=length(database)
#format the added stuff first
for (i in 1:length(addition)) {
addition[[i]]=paste(addition[[i]],collapse="\t")
database[[original_length+i]]=addition[[i]]
}
return(database)
}
add_to_database(database=hallmark.gs,addition=tx)
test=add_to_database(database=hallmark.gs,addition=tx)
View(test)
database=hallmark.gs
addition=tx
original_length=length(database)
original_length
length(addition)
addition=paste(additions[[ii]],collapse="\t")
addition=paste(addition[[i]],collapse="\t")
length(addition)
addition=tx
length(addition)
addition=paste(addition,collapse="\t")
length(addition)
add_to_database=function(database="",addition=""){
#need to make sure the length of the addition is correct when you have multiple lined things
addition=paste(addition,collapse="\t")
original_length=length(database)
for (i in 1:length(addition)) {
database[[original_length+i]]=addition[[i]]
}
return(database)
}
test=add_to_database(database=hallmark.gs,addition=tx)
View(test)
tz=c("BS","this source",tranf[,1],transm[,1])
tz=c("BS","this source",transf[,1],transm[,1])
ty=rbind(tx,tz)
View(ty)
add_to_database=function(database="",addition=""){
#need to make sure the length of the addition is correct when you have multiple lined things
addition=paste(addition,collapse="\t")
original_length=length(database)
for (i in 1:length(addition)) {
database[[original_length+i]]=addition[[i]]
}
return(database)
}
test2=add_to_database(database=hallmark.gs, addition=ty)
View(test2)
?collapse
?collapse()
addition=ty
length(addition)
rows(addition)
length(addition(1,))
length(addition[1,])
length(addition[,1])
add_to_database=function(database="",addition=""){
#need to make sure the length of the addition is correct when you have multiple lined things
original_length=length(database)
for (ii in 1: length(addition[,1])){
temp=paste(addition[[,ii]], collapse="\t")
database[[original_length+ii]]=temp
}
return(database)
}
test2=add_to_database(database=hallmark.gs, addition=ty)
ii
database=hallmark.gs
addition=ty
#need to make sure the length of the addition is correct when you have multiple lined things
original_length=length(database)
length(addition,1)
length(addition[,1])
ii=1
temp=paste(addition[[,ii]], collapse="\t")
addition[[,1]]
View(addition[[,1]])
add_to_database=function(database="",addition=""){
#think this one is closer to correct but there is a subscript out of bounds error with the paste
original_length=length(database)
for (ii in 1: length(addition[[,1]])){
temp=paste(addition[[,ii]], collapse="\t")
database[[original_length+ii]]=temp
}
return(database)
}
library(GSEA.plot)
data(hallmark.gs)
setwd("C:/Users/Student/Documents/CivelekLab/August_Edits/")
fname = "f_KLF14trans.txt"
transf = read.table(fname,header=F,stringsAsFactors=F)
fname = "m_KLF14trans.txt"
transm = read.table(fname,header=F,stringsAsFactors=F)
tx = c("HALLMARK_KLF14","http://www.broadinstitute.org/gsea/msigdb/cards/HALLMARK_KLF14",transf[,1], transm[,1])
tz=c("BS","this source",transf[,1],transm[,1])
ty=rbind(tx,tz)
View(ty)
test2=add_to_database(database=hallmark.gs, addition=ty)
database=hallmark.gs
addition=tx
addition=ty
#think this one is closer to correct but there is a subscript out of bounds error with the paste
original_length=length(database)
length(addition[[,1]])
addition
View(addition)
nrow(addition)
for (ii in 1: nrow(addition)){
temp=paste(addition[[,ii]], collapse="\t")
database[[original_length+ii]]=temp
}
nrow(addition)
for (ii in 1: nrow(addition)){
temp=paste(addition[[ii,]], collapse="\t")
database[[original_length+ii]]=temp
}
adddition[[1,]]
addition[[1,]]
addition[1]
addition[1,]
for (ii in 1: nrow(addition)){
temp=paste(addition[ii,], collapse="\t")
database[[original_length+ii]]=temp
}
View(database)
add_to_database=function(database="",addition=""){
original_length=length(database)
for (ii in 1: nrow(addition)){
temp=paste(addition[ii,], collapse="\t")
database[[original_length+ii]]=temp
}
return(database)
}
test2=add_to_database(database=hallmark.gs, addition=ty)
View(test2)
#####
# data
fname = "expr_gtexSubq_gsea.txt"
expr = read.table(fname,header=T,stringsAsFactors=F)
fname = "lab_gtexSubq_gsea.txt"
ann = read.table(fname,header=F,stringsAsFactors=F)[1,] %>% t
ann
pheno.input=create_phenoinput(ann)
View(pheno.input)
# format expr
expr2 = expr[!(duplicated(expr[,1])==T),]
expr.input = expr2[,3:ncol(expr2)]
rownames(expr.input) = expr2[,1]
pheno.input=create_phenoinput(ann)
# format expr
expr2 = expr[!(duplicated(expr[,1])==T),]
expr.input = expr2[,3:ncol(expr2)]
rownames(expr.input) = expr2[,1]
gene.set.input=test2
pp = GSEAplots(input.ds.name = expr.input, input.cls.name = pheno.input,
gene.set.input = gene.set.input, doc.string = "gtex6p",
nperm = 1000, nom.p.val.threshold = -1, fdr.q.val.threshold = 0.25,
bar_percent = 0.1, gap_percent = 0.1, under_percent = 0.1,
upper_percent = 0.1, color_line = "black", color_tick = "black",
abs.val = F, gs.size.threshold.max =1000)
plot.ES(list.of.plots=pp$plots,plotname="GSEA_plots")
use_data(transf)
library(devtools)
use_data(transf)
setwd("C:/Users/Student/GSEA.plot")
use_data(transf)
use_data(transm)
library(GSEA.plot)
data(key)
View(key)
typeof(key)
data(transf)
data(transm)
tx = c("HALLMARK_KLF14","http://www.broadinstitute.org/gsea/msigdb/cards/HALLMARK_KLF14",transf[,1], transm[,1])
addition=tx
nrow(tx)
typeof(tx)
tt=as.list(tx)
nrow(tt)
View(tt)
View(tx)
addition=tx
data(hallmark.gs)
database=hallmark.gs
original_length=length(database)
original_length
nrow(addition)
length(addition[,1])
length(addition[[,1]])
length(addition)
tt=as.vector(tx)
tt=t(tx)
nrow(tt)
tx = t(c("HALLMARK_KLF14","http://www.broadinstitute.org/gsea/msigdb/cards/HALLMARK_KLF14",transf[,1], transm[,1]))
gene.set.input=add_to_database(database=hallmark.gs,addition=tx)
get_genesets=function(database_file=""){
temp=database_file
max.Ng <- length(temp)
names <- vector(length = max.Ng, mode = "character")
gs.count <- 1
for (i in 1:max.Ng) {
gene.set.size <- length(unlist(strsplit(temp[[i]], "\t"))) - 2
gs.line <- noquote(unlist(strsplit(temp[[i]], "\t")))
gene.set.name <- gs.line[1]
names[gs.count] <- gene.set.name
gs.count <- gs.count + 1
}
return(names)
}
library(GSEA.plot)
database(key)
database_key()
database_key(all)
database_key("all")
database_key(database_key[53])
database_key(database_key("all")[53])
database_key("all")[53] %>% database_key() %>% data()
database_key("all")[53] %>% database_key()
data("Neph2012_Leukemia.db")
get_genesets("Neph2012_Leukemia.db")
sets=get_genesets("Neph2012_Leukemia.db")
sets=get_genesets(Neph2012_Leukemia.db)
symbols=get_genesymbols(Neph2012_Leukemia.db)
View(symbols)
symbols[1]
entry1=c(sets[1],"me",symbols[1])
View(entry1)
entry2=c(sets[2],"me",symbols[2])
entry3=c(sets[3],"me",symbols[3])
gene.set.input=rbind(entry1,entry2,entry3)
gene.set.input
gene.set.input=create_geneset_db(gene.set.input)
gene.set.input
View(gene.set.input)
entry1=c(sets[1],"me",as.character(symbols[1]))
View(entry1)
symbols=as.character(symbols)
symbols=get_genesymbols(Neph2012_Leukemia.db)
symbols=as.character(symbols)
symbols=get_genesymbols(Neph2012_Leukemia.db)
symbols=as.vector(symbols)
View(symbols)
gene.set.input=symbols[1:3]
gene.set.input=create_geneset_db(symbols[1:3])
gene.set.input
View(symbols[1])
data(hallmark.gs)
sets=get_genesets(hallmark.gs)
head(sets)
names_of_sets=sets[1:3]
hall_1=get_genesymbols(hallmark.gs)[1]
hall_2=get_genesymbols(hallmark.gs)[2]
hall_3=get_genesymbols(hallmark.gs)[3]
hall_13.db=rbind(hall_1,hall_2,hall_3)
hall_13.db
names(hall_13.db)=names_of_sets
hall_13.db
new_geneset=create_geneset_db(hall_13.db)
new_geneset
sarah=c(sets[1],"my creation",get_genesymbols(hallmark.gs)[1])
View(sarah)
new_sarah=create_geneset_db(sarah)
View(new_sarah)
get_genesymbols(hallmark.gs)
#fixing get_gene_symbols
temp=hallmark.gs
max.Ng <- length(temp)
temp.size.G <- vector(length = max.Ng, mode = "numeric")
for (i in 1:max.Ng) {
temp.size.G[i] <- length(unlist(strsplit(temp[[i]], "\t"))) - 2
}
database_file=hallmark.gs
temp=database_file
max.Ng <- length(temp)
temp.size.G <- vector(length = max.Ng, mode = "numeric")
for (i in 1:max.Ng) {
temp.size.G[i] <- length(unlist(strsplit(temp[[i]], "\t"))) - 2
}
max.size.G <- max(temp.size.G)
db <- matrix(rep("null", max.Ng*max.size.G), nrow=max.Ng, ncol= max.size.G)
names <- vector(length = max.Ng, mode = "character")
gs.count <- 1
for (i in 1:max.Ng) {
gs.line <- noquote(unlist(strsplit(temp[[i]], "\t")))
gene.set.name <- gs.line[1]
names[gs.count] <- gene.set.name
gene.symbols <- gs.line[-1]
gene.symbols <- gene.symbols[-1]
db[gs.count] <- gene.symbols
gs.count <- gs.count + 1
}
warnings()
for (i in 1:max.Ng) {
gs.line <- noquote(unlist(strsplit(temp[[i]], "\t")))
gene.set.name <- gs.line[1]
names[gs.count] <- gene.set.name
gene.symbols <- gs.line[-1]
gene.symbols <- gene.symbols[-1]
db[gs.count,] <- gene.symbols
gs.count <- gs.count + 1
}
gs.count
max.Ng
size(db)
temp=database_file
max.Ng <- length(temp)
temp.size.G <- vector(length = max.Ng, mode = "numeric")
for (i in 1:max.Ng) {
temp.size.G[i] <- length(unlist(strsplit(temp[[i]], "\t"))) - 2
}
max.size.G <- max(temp.size.G)
db <- matrix(rep("null", max.Ng*max.size.G), nrow=max.Ng, ncol= max.size.G)
names <- vector(length = max.Ng, mode = "character")
gs.count <- 1
for (i in 1:max.Ng) {
gs.line <- noquote(unlist(strsplit(temp[[i]], "\t")))
gene.set.name <- gs.line[1]
names[gs.count] <- gene.set.name
gene.symbols <- gs.line[-1]
gene.symbols <- gene.symbols[-1]
db[gs.count,] <- gene.symbols
gs.count <- gs.count + 1
}
gene.symbols
hallmark.gs[1]
hallmark.gs[50]
View(hallmark.gs)
hallmark.gs[50]
View(hallmark.gs[50])
gs.count
hallmark.gs[3]
get_genesymbols=function(database_file=""){
# temp=database_file
# max.Ng <- length(temp)
# temp.size.G <- vector(length = max.Ng, mode = "numeric")
# for (i in 1:max.Ng) {
#   temp.size.G[i] <- length(unlist(strsplit(temp[[i]], "\t"))) - 2
# }
#
# max.size.G <- max(temp.size.G)
# db <- matrix(rep("null", max.Ng*max.size.G), nrow=max.Ng, ncol= max.size.G)
# names <- vector(length = max.Ng, mode = "character")
# gs.count <- 1
#
# for (i in 1:max.Ng) {
#   gs.line <- noquote(unlist(strsplit(temp[[i]], "\t")))
#   gene.set.name <- gs.line[1]
#   names[gs.count] <- gene.set.name
#   gene.symbols <- gs.line[-1]
#   gene.symbols <- gene.symbols[-1]
#   db[gs.count,] <- gene.symbols
#   gs.count <- gs.count + 1
# }
# row.names(db)=names
temp=database_file
max.Ng <- length(temp)
names <- vector(length = max.Ng, mode = "character")
#db <- list(length=max.Ng,mode="character")
gs.count <- 1
for (i in 1:max.Ng) {
gene.set.size <- length(unlist(strsplit(temp[[i]], "\t"))) - 2
gs.line <- noquote(unlist(strsplit(temp[[i]], "\t")))
gene.set.name <- gs.line[1]
names[gs.count] <- gene.set.name
gene.symbols <- gs.line[-1]
gene.symbols <- gene.symbols[-1]
db[[gs.count]] <- gene.symbols
gs.count <- gs.count + 1
}
names(db)=names
return(db)
}
get_genesymbols(hallmark.gs)
get_genesymbols=function(database_file=""){
# temp=database_file
# max.Ng <- length(temp)
# temp.size.G <- vector(length = max.Ng, mode = "numeric")
# for (i in 1:max.Ng) {
#   temp.size.G[i] <- length(unlist(strsplit(temp[[i]], "\t"))) - 2
# }
#
# max.size.G <- max(temp.size.G)
# db <- matrix(rep("null", max.Ng*max.size.G), nrow=max.Ng, ncol= max.size.G)
# names <- vector(length = max.Ng, mode = "character")
# gs.count <- 1
#
# for (i in 1:max.Ng) {
#   gs.line <- noquote(unlist(strsplit(temp[[i]], "\t")))
#   gene.set.name <- gs.line[1]
#   names[gs.count] <- gene.set.name
#   gene.symbols <- gs.line[-1]
#   gene.symbols <- gene.symbols[-1]
#   db[gs.count,] <- gene.symbols
#   gs.count <- gs.count + 1
# }
# row.names(db)=names
temp=database_file
max.Ng <- length(temp)
names <- vector(length = max.Ng, mode = "character")
db <- list(length=max.Ng,mode="character")
gs.count <- 1
for (i in 1:max.Ng) {
gene.set.size <- length(unlist(strsplit(temp[[i]], "\t"))) - 2
gs.line <- noquote(unlist(strsplit(temp[[i]], "\t")))
gene.set.name <- gs.line[1]
names[gs.count] <- gene.set.name
gene.symbols <- gs.line[-1]
gene.symbols <- gene.symbols[-1]
db[[gs.count]] <- gene.symbols
gs.count <- gs.count + 1
}
names(db)=names
return(db)
}
get_genesymbols(hallmark.gs)
sarah=as.data.frame(get_genesymbols(hallmark.gs))
get_genesymbols$1
sarah=get_genesymbols(hallmark.gs)
sarah$HALLMARK_TNFA_SIGNALING_VIA_NFKB
sarah[1]
get_genesymbols=function(database_file=""){
temp=database_file
max.Ng <- length(temp)
names <- vector(length = max.Ng, mode = "character")
db <- list(length=max.Ng,mode="character")
gs.count <- 1
for (i in 1:max.Ng) {
gs.line <- noquote(unlist(strsplit(temp[[i]], "\t")))
gene.set.name <- gs.line[1]
names[gs.count] <- gene.set.name
gene.symbols <- gs.line[-1]
gene.symbols <- gene.symbols[-1]
db[[gs.count]] <- gene.symbols
gs.count <- gs.count + 1
}
names(db)=names
return(db)
}
#fixing get_gene_symbols
symbols=get_genesymbols(hallmark.gs)
symbols$HALLMARK_TNFA_SIGNALING_VIA_NFKB
#fixing get_gene_symbols
sets=get_genesets(hallmark.gs)
entry1=c(sets[1],"description",symbols$HALLMARK_TNFA_SIGNALING_VIA_NFKB)
View(entry1)
sets[2]
symbols$(sets[3])
symbols$sets[2]
sets[3]
entry1=c(sets[1],"description",symbols$HALLMARK_TNFA_SIGNALING_VIA_NFKB)
entry2=c(sets[2],"description",symbols$HALLMARK_HYPOXIA)
entry3=c(sets[3],"description",symbols$HALLMARK_CHOLESTEROL_HOMEOSTASIS)
entry=rbind(entry1,entry2, entry3)
?c
entry4=rbind(sets[1],"description",symbols$HALLMARK_TNFA_SIGNALING_VIA_NFKB)
View(entry4)
entry=cbind(entry1,entry2, entry3)
entry=rbind(entry1,entry2, entry3)
entry=c(entry1,entry2,entry3)
entry=list(entry1,entry2,entry3)
entry
gene.set.input=create_geneset_db(entry)
gene.set.input
hall_13.db
View(hall_13.db)
names_of_sets=sets[1:3]
hall_1=c("source",get_genesymbols(hallmark.gs)[1])
hall_1
